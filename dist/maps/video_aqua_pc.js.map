{"version":3,"sources":["video_aqua_pc.js"],"names":["window","requirejs","player","AquaPlayerService","Timer","initPlayer","setVolume","bindEvent","ec","msg","console","NPlayer","videoDuration","getDuration","state","videoLastPlayedTime","confirm","setPlayer","OpenState","Closed","timerLog","PlayState","timerLoggingInterval","sessionProgressStartLogger","reset","Stopped","Paused","info","pause","videoEndTimeLogger","showPlayBtn","setTimeout","secondTimer","$","removeClass","log","addEventListener","startValues","seconds","waitMessage","html","getTimeValues","toString","e","alert","location","axios","all","deleteVideoLog","deleteSessionLog","then","spread","res1","res2","reload","timer","videoPlayTimeLogger","stop","checkVideoDuration","error","videoCurrentTime","getCurrentPlaybackTime","ajax","btnReplayVideo","data","video_id","played_seconds","video_duration","currenttime","training_user_id","trainingUserId","done","videoId","timerLogPlayedSeconds","res","videoTotalPlayedSeconds","total_played_seconds","type","success","course_id","course_list_id","url","playerContainer","sessionHasEnded","hasEnded","href","nextUrl","Math","floor","passiveRate","btnPlayNext","addClass","delete","params","preventDefault","response","catch","aquaHtml5","aquaWindow","fileUrl","watermark","callback","obj","options","osName","show","on","event","sessionProgressEndLogger","play"],"mappings":"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","file":"../javascripts/video_aqua_pc.js","sourcesContent":["window.requirejs(\n  [\n    'common',\n    'aquaPlayerService',\n    'easyTimer',\n    'jqueryTimer'\n  ],\nfunction (Util, AquaPlayerService, Timer) {\n  var $ = $ || window.$;\n  var axios = axios || window.axios;\n  var osName = Util.getOSName();\n\n  var player = null;\n  var playerContainer = $('.videoplayer');\n  var aquaHtml5 = $('#aqua_html5');\n  var aquaWindow = $('#aqua_window');\n  var btnPlayNext = $('#btn_play_next');\n  var btnReplayVideo = $('#btn_replay_video');\n\n  var timerLoggingInterval = playerContainer.data('interval'); // log every 5 seconds\n  var timerLog = null;\n  var timerLogPlayedSeconds = 0; // 시청시간(초)\n  var secondTimer = new Timer();\n\n  var waitMessage = $('#countdown .values'); // $('.wait-message');\n  var passiveRate = playerContainer.data('passive-rate'); // 다음 버튼을 노출하는 시점\n  var sessionHasEnded = false;\n  var nextUrl = btnPlayNext.parent().attr('href');\n  var videoDuration = null; // 비디오 러닝타임\n  var videoCurrentTime; // 비디오 현재 시청시간\n  var videoId = playerContainer.data('id'); // video 테이블의 id\n  var videoTotalPlayedSeconds = playerContainer.data('total-play'); // 비디오 총 시청시간\n  var videoLastPlayedTime = playerContainer.data('current-time'); // 마지막 재생시점\n  var trainingUserId = btnPlayNext.data('training-user-id');\n\n  $(function () {\n    var options = {\n      fileUrl: $('#video').data('url'),\n      watermark: $('#video').data('watermark'),\n      callback: function (obj) {\n        if (obj) {\n          player = obj;\n          initPlayer();\n        }\n      }\n    };\n    AquaPlayerService = new AquaPlayerService(options);\n\n    if (osName === 'Windows') {\n      console.log('Windows player');\n      aquaWindow.show();\n    } else {\n      aquaHtml5.show();\n    }\n  });\n\n  function initPlayer () {\n    player.setVolume(0.5);\n\n    player.bindEvent('Error', function (ec, msg) {\n      console.error(msg);\n    });\n\n    player.bindEvent('OpenStateChanged', function (state) {\n      switch (state) {\n      case window.NPlayer.OpenState.Opened:\n        console.info('player: playing');\n\n        videoDuration = player.getDuration();\n\n        if (videoLastPlayedTime < videoDuration - 5) {\n          if (window.confirm('마지막 재생시점으로 이동하시겠습니까?')) {\n            player.setCurrentPlaybackTime(videoLastPlayedTime);\n            // player.pause();\n          }\n        }\n\n        setPlayer();\n        break;\n\n      case window.NPlayer.OpenState.Closed:\n        console.log('closed');\n        break;\n      }\n    });\n\n    player.bindEvent('PlayStateChanged', function (state) {\n      switch (state) {\n      case window.NPlayer.PlayState.Playing:\n        // 세션시작로그\n        sessionProgressStartLogger();\n\n        // 로깅 시간간격 설정\n        timerLog.reset(1000 * timerLoggingInterval);\n        break;\n\n      case window.NPlayer.PlayState.Stopped: // 정지\n      case window.NPlayer.PlayState.Paused:  // 일시정지\n        console.info('player: stop/pause');\n\n        // 로깅 일시정지\n        timerLog.pause();\n\n        // 비디오 시청 종료일시 기록\n        videoEndTimeLogger();\n        break;\n      }\n    });\n\n    player.bindEvent('PlaybackCompleted', function () {\n      console.info('player: ended');\n\n      // 로깅 일시정지\n      timerLog.pause();\n\n      // 총 시청시간에 따라 다음 버튼 표시\n      showPlayBtn(videoTotalPlayedSeconds + timerLoggingInterval);\n\n      // 비디오 시청 종료일시 기록\n      videoEndTimeLogger();\n\n      // 세션 종료 시 대기 타이머 시작\n      if (!sessionHasEnded) {\n        setTimeout(function () {\n          $('.timer').removeClass('blind');\n\n          console.log('second timer started');\n          secondTimer.start({countdown: true, startValues: {seconds: 30}});\n\n          waitMessage.html(secondTimer.getTimeValues().toString() + ' 초 이내 <b>다음</b> 버튼을 클릭해주세요.');\n\n          secondTimer.addEventListener('secondsUpdated', function (e) {\n            waitMessage.html(secondTimer.getTimeValues().toString() + ' 초 이내 <b>다음</b> 버튼을 클릭해주세요.');\n          });\n\n          secondTimer.addEventListener('targetAchieved', function (e) {\n            waitMessage.html('학습 초기화 중입니다..');\n\n            setTimeout(function () {\n              window.alert('30초 동안 다음 버튼을 누르지 않아 학습을 초기화 하였습니다.\\n\\n재시청 해주시기 바랍니다.');\n\n              axios.all([ deleteVideoLog(), deleteSessionLog() ])\n              .then(axios.spread(function (res1, res2) {\n                window.location.reload();\n              }));\n            }, 3000);\n          });\n        }, 1000);\n      }\n    });\n  }\n\n  /**\n   * Player 를 셋팅한다.\n   */\n  function setPlayer () {\n    if (videoDuration) {\n      timerLog = $.timer(1000 * timerLoggingInterval, videoPlayTimeLogger, true);\n      timerLog.stop();\n      checkVideoDuration();\n    } else {\n      console.error('을 확인할 수 없습니다.');\n    }\n  }\n\n  /**\n   * 비디오 재생시간이 존재하는지 여부 체크\n   */\n  function checkVideoDuration () {\n    // 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n    showPlayBtn(videoTotalPlayedSeconds);\n  }\n\n    /**\n   * 시청시간 로깅\n   */\n  function videoPlayTimeLogger () {\n    console.log('video played time logging...');\n    timerLogPlayedSeconds += timerLoggingInterval;\n\n    var seconds = player.getCurrentPlaybackTime();\n\n    if ((videoCurrentTime > 0) && videoCurrentTime === seconds) {\n      player.pause();\n      btnReplayVideo.removeClass('blind');\n      return;\n    }\n\n    videoCurrentTime = seconds;\n\n    $.ajax({\n      type: 'POST',\n      url: '/video/log/playtime',\n      data: {\n        training_user_id: trainingUserId,\n        video_id: videoId,\n        played_seconds: timerLogPlayedSeconds,\n        video_duration: videoDuration,\n        currenttime: seconds\n      }\n    }).done(function (res) {\n      if (!res.success) {\n        console.error(res.msg);\n\n        // 오류 발생 시 타이머와 비디오 재생을 멈춘다.\n        player.pause().then(function () {\n        }).catch(function (error) {\n          console.error(error);\n        });\n      } else {\n        timerLogPlayedSeconds = 0;\n        // 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n        videoTotalPlayedSeconds = res.total_played_seconds;\n        showPlayBtn(videoTotalPlayedSeconds);\n      }\n    });\n  }\n\n  /**\n   * 비디오 시청 종료시간 로깅\n   */\n  function videoEndTimeLogger () {\n    console.log('video log end');\n    $.ajax({\n      type: 'POST',\n      url: '/video/log/endtime',\n      data: {\n        video_id: videoId\n      }\n    }).done(function (res) {\n      if (!res.success) {\n        console.error(res.msg);\n      } else {\n      // console.info('종료시간 기록!');\n      }\n    });\n  }\n\n  /**\n   * 세션 시작일시 로깅\n   */\n  function sessionProgressStartLogger () {\n    $.ajax({\n      type: 'POST',\n      url: '/session/log/starttime',\n      data: {\n        training_user_id: playerContainer.data('training-user-id'),\n        course_id: playerContainer.data('course-id'),\n        course_list_id: playerContainer.data('course-list-id')\n      }\n    }).done(function (res) {\n      if (!res.success) {\n        console.error(res.msg);\n        // 오류 발생 시 타이머와 비디오 재생을 멈춘다.\n        timerLog.stop();\n        player.stop();\n      } else {\n        sessionHasEnded = res.hasEnded; // 세션 종료여부\n      }\n    });\n  }\n\n/**\n * 다음버튼 클릭 시 발생 이벤트\n */\n  btnPlayNext.on('click', function (event) {\n    event.preventDefault();\n    secondTimer.stop();\n    // 세션 종료로그를 기록한다.\n    sessionProgressEndLogger();\n  });\n\n  /**\n   * 세션 종료일시 로깅\n   */\n  function sessionProgressEndLogger () {\n    $.ajax({\n      type: 'POST',\n      url: '/session/log/endtime',\n      data: {\n        training_user_id: playerContainer.data('training-user-id'),\n        course_id: playerContainer.data('course-id'),\n        course_list_id: playerContainer.data('course-list-id')\n      }\n    }).done(function (res) {\n      if (!res.success) {\n        console.error(res.msg);\n      } else {\n        window.location.href = nextUrl;\n      }\n    });\n  }\n\n  /**\n   * 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n   */\n  function showPlayBtn () {\n    if (Math.floor(videoDuration * (passiveRate / 100)) <= videoTotalPlayedSeconds) {\n      btnPlayNext.removeClass('blind');\n      btnReplayVideo.addClass('blind');\n    }\n  }\n\n  /**\n   * 세션 비디오 로그를 삭제한다.\n   */\n  function deleteVideoLog () {\n    return axios.delete('/video/log', {\n      params: {\n        video_id: playerContainer.data('id')\n      }\n    })\n    .then(function (response) {\n    })\n    .catch(function (error) {\n      console.error(error);\n    });\n  }\n\n  // 세션 로그를 삭제한다.\n  function deleteSessionLog () {\n    return axios.delete('/session/log', {\n      params: {\n        training_user_id: playerContainer.data('training-user-id'),\n        course_list_id: playerContainer.data('course-list-id')\n      }\n    })\n    .then(function (response) {\n    })\n    .catch(function (error) {\n      console.error(error);\n    });\n  }\n\n  btnReplayVideo.on('click', function (e) {\n    e.preventDefault();\n\n    player.play();\n    btnReplayVideo.addClass('blind');\n  });\n});\n"]}