{"version":3,"sources":["video_aqua_pc.js"],"names":["window","requirejs","player","AquaPlayerService","Timer","pause","console","videoDuration","confirm","setCurrentPlaybackTime","videoLastPlayedTime","then","seconds","catch","error","bindEvent","ec","msg","NPlayer","getDuration","state","setPlayer","PlayState","Playing","info","sessionProgressStartLogger","timerLog","reset","timerLoggingInterval","Stopped","Paused","videoEndTimeLogger","showPlayBtn","setTimeout","secondTimer","$","removeClass","log","addEventListener","startValues","waitMessage","html","getTimeValues","toString","e","alert","location","axios","all","deleteVideoLog","deleteSessionLog","spread","res1","res2","reload","timer","videoPlayTimeLogger","stop","checkVideoDuration","videoCurrentTime","getCurrentPlaybackTime","ajax","btnReplayVideo","data","video_id","played_seconds","video_duration","currenttime","training_user_id","trainingUserId","done","videoId","timerLogPlayedSeconds","res","videoTotalPlayedSeconds","total_played_seconds","type","success","course_id","course_list_id","url","playerContainer","href","nextUrl","btnPlayNext","addClass","delete","params","preventDefault","response","aquaHtml5","aquaWindow","sessionHasEnded","parent","osName","options","watermark","initPlayer","callback","obj","on","event","sessionProgressEndLogger","play"],"mappings":"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","file":"../javascripts/video_aqua_pc.js","sourcesContent":["window.requirejs(\n  [\n    'common',\n    'aquaPlayerService',\n    'easyTimer',\n    'jqueryTimer'\n  ],\nfunction (Util, AquaPlayerService, Timer) {\n  var $ = $ || window.$;\n  var axios = axios || window.axios;\n  var osName = Util.getOSName();\n\n  var player = null;\n  var playerContainer = $('.videoplayer');\n  var aquaHtml5 = $('#aqua_html5');\n  var aquaWindow = $('#aqua_html5');\n  var btnPlayNext = $('#btn_play_next');\n  var btnReplayVideo = $('#btn_replay_video');\n\n  var timerLoggingInterval = playerContainer.data('interval'); // log every 5 seconds\n  var timerLog = null;\n  var timerLogPlayedSeconds = 0; // 시청시간(초)\n  var secondTimer = new Timer();\n\n  var waitMessage = $('#countdown .values'); // $('.wait-message');\n  var sessionHasEnded = false;\n  var nextUrl = btnPlayNext.parent().attr('href');\n  var videoDuration = null; // 비디오 러닝타임\n  var videoCurrentTime; // 비디오 현재 시청시간\n  var videoId = playerContainer.data('id'); // video 테이블의 id\n  var videoTotalPlayedSeconds = playerContainer.data('total-play'); // 비디오 총 시청시간\n  var videoLastPlayedTime = playerContainer.data('current-time'); // 마지막 재생시점\n  var trainingUserId = btnPlayNext.data('training-user-id');\n\n  $(function () {\n    if (osName === 'Windows') {\n      aquaHtml5.show();\n    } else {\n      aquaWindow.show();\n    }\n\n    var options = {\n      fileUrl: $('#video').data('url'),\n      watermark: $('#video').data('watermark'),\n      callback: function (obj) {\n        if (obj) {\n          player = obj;\n          initPlayer();\n        }\n      }\n    };\n    AquaPlayerService = new AquaPlayerService(options);\n  });\n\n  function initPlayer () {\n    player.setVolume(0.5);\n\n    if (videoLastPlayedTime < videoDuration - 5) {\n      if (window.confirm('마지막 재생시점으로 이동하시겠습니까?')) {\n        player.setCurrentPlaybackTime(videoLastPlayedTime).then(function (seconds) {\n          player.pause();\n        }).catch(function (error) {\n          console.error(error);\n        });\n      }\n    }\n\n    player.bindEvent('Error', function (ec, msg) {\n      console.error(msg);\n    });\n\n    player.bindEvent('PlayStateChanged', function (state) {\n      switch (state) {\n      case window.NPlayer.PlayState.Playing:\n        console.info('player: playing');\n\n        videoDuration = player.getDuration();\n        setPlayer();\n\n        // 세션시작로그\n        sessionProgressStartLogger();\n\n        // 로깅 시간간격 설정\n        timerLog.reset(1000 * timerLoggingInterval);\n        break;\n\n      case window.NPlayer.PlayState.Stopped: // 정지\n      case window.NPlayer.PlayState.Paused:  // 일시정지\n        console.info('player: stop/pause');\n\n        // 로깅 일시정지\n        timerLog.pause();\n\n        // 비디오 시청 종료일시 기록\n        videoEndTimeLogger();\n        break;\n      }\n    });\n\n    player.bindEvent('PlaybackCompleted', function () {\n      console.info('player: ended');\n\n      // 로깅 일시정지\n      timerLog.pause();\n\n      // 총 시청시간에 따라 다음 버튼 표시\n      showPlayBtn(videoTotalPlayedSeconds + timerLoggingInterval);\n\n      // 비디오 시청 종료일시 기록\n      videoEndTimeLogger();\n\n      // 세션 종료 시 대기 타이머 시작\n      if (!sessionHasEnded) {\n        setTimeout(function () {\n          $('.timer').removeClass('blind');\n\n          console.log('second timer started');\n          secondTimer.start({countdown: true, startValues: {seconds: 30}});\n\n          waitMessage.html(secondTimer.getTimeValues().toString() + ' 초 이내 <b>다음</b> 버튼을 클릭해주세요.');\n\n          secondTimer.addEventListener('secondsUpdated', function (e) {\n            waitMessage.html(secondTimer.getTimeValues().toString() + ' 초 이내 <b>다음</b> 버튼을 클릭해주세요.');\n          });\n\n          secondTimer.addEventListener('targetAchieved', function (e) {\n            waitMessage.html('학습 초기화 중입니다..');\n\n            setTimeout(function () {\n              window.alert('30초 동안 다음 버튼을 누르지 않아 학습을 초기화 하였습니다.\\n\\n재시청 해주시기 바랍니다.');\n\n              axios.all([ deleteVideoLog(), deleteSessionLog() ])\n              .then(axios.spread(function (res1, res2) {\n                window.location.reload();\n              }));\n            }, 3000);\n          });\n        }, 1000);\n      }\n    });\n  }\n\n  /**\n   * Player 를 셋팅한다.\n   */\n  function setPlayer () {\n    if (videoDuration) {\n      timerLog = $.timer(1000 * timerLoggingInterval, videoPlayTimeLogger, true);\n      timerLog.stop();\n      checkVideoDuration();\n    } else {\n      console.error('을 확인할 수 없습니다.');\n    }\n  }\n\n  /**\n   * 비디오 재생시간이 존재하는지 여부 체크\n   */\n  function checkVideoDuration () {\n    // 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n    showPlayBtn(videoTotalPlayedSeconds);\n  }\n\n    /**\n   * 시청시간 로깅\n   */\n  function videoPlayTimeLogger () {\n    console.log('logging...');\n    timerLogPlayedSeconds += timerLoggingInterval;\n\n    var seconds = player.getCurrentPlaybackTime();\n\n    if ((videoCurrentTime > 0) && videoCurrentTime === seconds) {\n      player.pause();\n      btnReplayVideo.removeClass('blind');\n      return;\n    }\n\n    videoCurrentTime = seconds;\n\n    $.ajax({\n      type: 'POST',\n      url: '/video/log/playtime',\n      data: {\n        training_user_id: trainingUserId,\n        video_id: videoId,\n        played_seconds: timerLogPlayedSeconds,\n        video_duration: videoDuration,\n        currenttime: seconds\n      }\n    }).done(function (res) {\n      if (!res.success) {\n        console.error(res.msg);\n\n        // 오류 발생 시 타이머와 비디오 재생을 멈춘다.\n        player.pause().then(function () {\n        }).catch(function (error) {\n          console.error(error);\n        });\n      } else {\n        timerLogPlayedSeconds = 0;\n        // 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n        videoTotalPlayedSeconds = res.total_played_seconds;\n        showPlayBtn(videoTotalPlayedSeconds);\n      }\n    });\n  }\n\n  /**\n   * 비디오 시청 종료시간 로깅\n   */\n  function videoEndTimeLogger () {\n    console.log('video log end');\n    $.ajax({\n      type: 'POST',\n      url: '/video/log/endtime',\n      data: {\n        video_id: videoId\n      }\n    }).done(function (res) {\n      if (!res.success) {\n        console.error(res.msg);\n      } else {\n      // console.info('종료시간 기록!');\n      }\n    });\n  }\n\n  /**\n   * 세션 시작일시 로깅\n   */\n  function sessionProgressStartLogger () {\n    $.ajax({\n      type: 'POST',\n      url: '/session/log/starttime',\n      data: {\n        training_user_id: playerContainer.data('training-user-id'),\n        course_id: playerContainer.data('course-id'),\n        course_list_id: playerContainer.data('course-list-id')\n      }\n    }).done(function (res) {\n      if (!res.success) {\n        console.error(res.msg);\n      }\n    });\n  }\n\n/**\n * 다음버튼 클릭 시 발생 이벤트\n */\n  btnPlayNext.on('click', function (event) {\n    event.preventDefault();\n    secondTimer.stop();\n    // 세션 종료로그를 기록한다.\n    sessionProgressEndLogger();\n  });\n\n  /**\n   * 세션 종료일시 로깅\n   */\n  function sessionProgressEndLogger () {\n    $.ajax({\n      type: 'POST',\n      url: '/session/log/endtime',\n      data: {\n        training_user_id: playerContainer.data('training-user-id'),\n        course_id: playerContainer.data('course-id'),\n        course_list_id: playerContainer.data('course-list-id')\n      }\n    }).done(function (res) {\n      if (!res.success) {\n        console.error(res.msg);\n      } else {\n        window.location.href = nextUrl;\n      }\n    });\n  }\n\n  /**\n   * 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n   */\n  function showPlayBtn () {\n    if (playerContainer.data('status') === 'done') {\n      btnPlayNext.removeClass('blind');\n      btnReplayVideo.addClass('blind');\n    }\n  }\n\n  /**\n   * 세션 비디오 로그를 삭제한다.\n   */\n  function deleteVideoLog () {\n    return axios.delete('/video/log', {\n      params: {\n        video_id: playerContainer.data('id')\n      }\n    })\n    .then(function (response) {\n    })\n    .catch(function (error) {\n      console.error(error);\n    });\n  }\n\n  // 세션 로그를 삭제한다.\n  function deleteSessionLog () {\n    return axios.delete('/session/log', {\n      params: {\n        training_user_id: playerContainer.data('training-user-id'),\n        course_list_id: playerContainer.data('course-list-id')\n      }\n    })\n    .then(function (response) {\n    })\n    .catch(function (error) {\n      console.error(error);\n    });\n  }\n\n  btnReplayVideo.on('click', function (e) {\n    e.preventDefault();\n\n    player.play();\n    btnReplayVideo.addClass('blind');\n  });\n});\n"]}