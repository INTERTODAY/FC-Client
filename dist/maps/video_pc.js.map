{"version":3,"sources":["video_pc.js"],"names":["window","requirejs","passiveRate","playerContainer","initPlayer","videoDuration","console","setPlayer","player","catch","then","error","getDuration","duration","videoLastPlayedTime","setCurrentTime","confirm","seconds","pause","timerLog","$","timer","timerLoggingInterval","videoPlayTimeLogger","stop","checkVideoDuration","btnPlayNext","showPlayBtn","totalPlayedSeconds","Math","floor","addClass","btnReplayVideo","getCurrentTime","videoCurrentTime","video_id","ajax","log","type","removeClass","url","data","video_duration","currenttime","msg","videoId","played_seconds","timerLogPlayedSeconds","done","res","videoTotalPlayedSeconds","total_played_seconds","success","sessionProgressStartLogger","trainingUserId","course_id","courseId","sessionHasEnded","hasEnded","sessionProgressEndLogger","course_list_id","courseListId","waitingTimeLogger","nextUrl","deleteVideoLog","deleteSessionLog","params","response","delete","event","training_user_id","secondTimer","waitMessage","attr","Timer","loop","reset","preventDefault","on","info","setTimeout","start","countdown","getTimeValues","videoEndTimeLogger","startValues","html","toString","addEventListener","e","axios","all","spread","res1","res2","location","reload","unload"],"mappings":"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","file":"../javascripts/video_pc.js","sourcesContent":["'use strict';\n\nwindow.requirejs(\n  [\n    'jquery',\n    'axios',\n    'Vimeo',\n    'easyTimer',\n    'jqueryTimer'\n  ],\nfunction ($, axios, Vimeo, Timer) {\n  var player = null;\n  var playerContainer = $('.videoplayer');\n  var timerLoggingInterval = playerContainer.data('interval'); // log every 5 seconds\n  var timerLog = null;\n  var timerWait = null; // 비디오 시청 종료 후 다음 버튼을 누르도록 강요하는 타이머\n  var timerLogPlayedSeconds = 0; // 시청시간(초)\n  var timerWaitingSeconds = playerContainer.data('wait-seconds'); // 다음버튼을 노출하는데 까지 대기하는 시간\n  var passiveRate = playerContainer.data('passive-rate'); // 다음 버튼을 노출하는 시점\n  var videoDuration = null; // 비디오 러닝타임\n  var waitMessage = $('#countdown .values'); // $('.wait-message');\n  var sessionHasEnded = false;\n  var videoCurrentTime; // 비디오 현재 시청시간\n\n  // element cache\n  var btnPlayNext = $('#btn_play_next');\n  var nextUrl = btnPlayNext.parent().attr('href');\n  var btnReplayVideo = $('#btn_replay_video');\n\n  // element data\n  var videoId = playerContainer.data('id'); // video 테이블의 id\n  var videoTotalPlayedSeconds = playerContainer.data('total-play'); // 비디오 총 시청시간\n  var videoLastPlayedTime = playerContainer.data('current-time'); // 마지막 재생시점\n  var trainingUserId = btnPlayNext.data('training-user-id');\n  var courseId = btnPlayNext.data('course-id');\n  var courseListId = btnPlayNext.data('course-list-id');\n\n  var secondTimer = new Timer();\n\n/**\n * entry point\n */\n  $(function () {\n    initPlayer();\n  });\n\n  /**\n   * Player 를 초기화 한다.\n   */\n  function initPlayer () {\n    var options = {\n      loop: false\n    };\n    player = new Vimeo('videoplayer', options);\n    player.setVolume(0.5); // 볼륨설정\n    player.ready().then(function () {\n      console.info('Player is ready.');\n\n      player.getDuration().then(function (duration) {\n        console.log('duration : ', duration);\n\n        videoDuration = duration; // 비디오 지속시간 구하기\n        setPlayer();\n      }).catch(function (error) {\n        console.error(error);\n      });\n\n      if (videoLastPlayedTime < videoDuration - 5) {\n        if (window.confirm('마지막 재생시점으로 이동하시겠습니까?')) {\n          player.setCurrentTime(videoLastPlayedTime).then(function (seconds) {\n            player.pause();\n          }).catch(function (error) {\n            console.error(error);\n          });\n        }\n      }\n    }).catch(function (error) {\n      console.error(error);\n    });\n\n    // player.enableTextTrack('ko').then(function (track) {\n    //   track.language = 'kr';\n    //   track.kind = 'subtitles';\n    //   track.label = 'hahaha';\n    // })\n    // .catch(function (error) {\n    //   console.log('track : ' + error);\n    // });\n  }\n\n  /**\n   * Player 를 셋팅한다.\n   */\n  function setPlayer () {\n    if (videoDuration) {\n      timerLog = $.timer(1000 * timerLoggingInterval, videoPlayTimeLogger, true);\n      timerLog.stop();\n      checkVideoDuration();\n    } else {\n      console.error('재생시간을 확인할 수 없습니다.');\n    }\n  }\n\n  /**\n   * 비디오 재생시간이 존재하는지 여부 체크\n   */\n  function checkVideoDuration () {\n  // videoDuration = getPlayerDuration();\n  // 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n    showPlayBtn(videoTotalPlayedSeconds);\n  }\n\n  /**\n   * 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n   */\n  function showPlayBtn (totalPlayedSeconds) {\n    if (Math.floor(videoDuration * (passiveRate / 100)) <= totalPlayedSeconds) {\n      btnPlayNext.removeClass('blind');\n      btnReplayVideo.addClass('blind');\n    }\n  }\n\n  /**\n   * 시청시간 로깅\n   */\n  function videoPlayTimeLogger () {\n    console.log('logging...');\n    timerLogPlayedSeconds += timerLoggingInterval;\n\n    player.getCurrentTime().then(function (seconds) {\n      if ((videoCurrentTime > 0) && videoCurrentTime === seconds) {\n        player.pause().then(function () {\n          console.log('비디오가 중지되었습니다.');\n          btnReplayVideo.removeClass('blind');\n        }).catch(function (error) {\n          console.error(error);\n        });\n        return;\n      }\n      videoCurrentTime = seconds;\n      $.ajax({\n        type: 'POST',\n        url: '/video/log/playtime',\n        data: {\n          training_user_id: trainingUserId,\n          video_id: videoId,\n          played_seconds: timerLogPlayedSeconds,\n          video_duration: videoDuration,\n          currenttime: seconds\n        }\n      }).done(function (res) {\n        if (!res.success) {\n          console.error(res.msg);\n\n          // 오류 발생 시 타이머와 비디오 재생을 멈춘다.\n          player.pause().then(function () {\n          }).catch(function (error) {\n            console.error(error);\n          });\n        } else {\n          timerLogPlayedSeconds = 0;\n          // 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n          videoTotalPlayedSeconds = res.total_played_seconds;\n          showPlayBtn(videoTotalPlayedSeconds);\n        }\n      });\n    }).catch(function (error) {\n      console.error(error);\n    });\n  }\n\n  /**\n   * 비디오 시청 종료시간 로깅\n   */\n  function videoEndTimeLogger () {\n    console.log('video log end');\n    $.ajax({\n      type: 'POST',\n      url: '/video/log/endtime',\n      data: {\n        video_id: videoId\n      }\n    }).done(function (res) {\n      if (!res.success) {\n        console.error(res.msg);\n      } else {\n      // console.info('종료시간 기록!');\n      }\n    });\n  }\n\n  /**\n   * 세션 시작일시 로깅\n   */\n  function sessionProgressStartLogger () {\n    console.log('session log start');\n    $.ajax({\n      type: 'POST',\n      url: '/session/log/starttime',\n      data: {\n        training_user_id: trainingUserId,\n        course_id: courseId,\n        course_list_id: courseListId\n      }\n    }).done(function (res) {\n      if (!res.success) {\n        console.error(res.msg);\n      // 오류 발생 시 타이머와 비디오 재생을 멈춘다.\n        timerLog.stop();\n        player.stop();\n      } else {\n        sessionHasEnded = res.hasEnded; // 세션 종료여부\n      }\n    });\n  }\n\n  /**\n   * 세션 종료일시 로깅\n   */\n  function sessionProgressEndLogger () {\n    console.log('session log end');\n    $.ajax({\n      type: 'POST',\n      url: '/session/log/endtime',\n      data: {\n        training_user_id: trainingUserId,\n        course_id: courseId,\n        course_list_id: courseListId\n      }\n    }).done(function (res) {\n      if (!res.success) {\n        console.error(res.msg);\n      // 오류 발생 시 타이머와 비디오 재생을 멈춘다.\n        timerLog.stop();\n        player.stop();\n      } else {\n        // console.info('세션 종료시간 기록');\n        window.location.href = nextUrl;\n      }\n    });\n  }\n\n  /**\n   * 정해진 시간 내에 다음 버튼을 누르지 않을 경우\n   * 학습을 초기화 하는 타이머 컨트롤러\n   */\n  function waitingTimeLogger () {\n    timerWaitingSeconds -= 1;\n    waitMessage.html(' ( ' + timerWaitingSeconds + ' 초 이내 클릭 )');\n\n    // 세션과 비디오 로그를 삭제한다.\n    if (timerWaitingSeconds <= 0) {\n      timerWait.stop();\n      window.alert('비디오를 재시청 해주시기 바랍니다.');\n\n      axios.all([ deleteVideoLog(), deleteSessionLog() ])\n        .then(axios.spread(function (res1, res2) {\n          window.location.reload();\n        }));\n    }\n  }\n\n  /**\n   * 세션 비디오 로그를 삭제한다.\n   */\n  function deleteVideoLog () {\n    return axios.delete('/video/log', {\n      params: {\n        video_id: videoId\n      }\n    })\n    .then(function (response) {\n    })\n    .catch(function (error) {\n      console.error(error);\n    });\n  }\n\n  // 세션 로그를 삭제한다.\n  function deleteSessionLog () {\n    return axios.delete('/session/log', {\n      params: {\n        training_user_id: trainingUserId,\n        course_list_id: courseListId\n      }\n    })\n    .then(function (response) {\n    })\n    .catch(function (error) {\n      console.error(error);\n    });\n  }\n\n/**\n * 다음버튼 클릭 시 발생 이벤트\n */\n  btnPlayNext.on('click', function (event) {\n    event.preventDefault();\n\n    secondTimer.stop();\n    // 세션 종료로그를 기록한다.\n    sessionProgressEndLogger();\n  });\n\n  /**\n   * Player 재생 시 발생\n   */\n  player.on('play', function (data) {\n    // secondTimer.reset();\n    // 세션시작로그\n    sessionProgressStartLogger();\n    // 로깅 시간간격 설정\n    timerLog.reset(1000 * timerLoggingInterval);\n  });\n\n  /**\n   * Player 일시정지 시 발생\n   */\n  player.on('error', function (data) {\n    console.info('error!');\n    console.error(data);\n  });\n\n  /**\n   * Player 일시정지 시 발생\n   */\n  player.on('pause', function (data) {\n    console.info('player: pause');\n    // 로깅 일시정지\n    timerLog.pause();\n    // 비디오 시청 종료일시 기록\n    videoEndTimeLogger();\n  });\n\n/**\n * Player 종료 시 발생\n */\n  player.on('ended', function (data) {\n    console.info('player: ended');\n    // 로깅 일시정지\n    timerLog.pause();\n    // 총 시청시간에 따라 다음 버튼 표시\n    showPlayBtn(videoTotalPlayedSeconds + timerLoggingInterval);\n    // 비디오 시청 종료일시 기록\n    videoEndTimeLogger();\n    // 세션 종료 시 대기 타이머 시작\n    if (!sessionHasEnded) {\n      setTimeout(function () {\n        // timerWait = $.timer(1000 * 1, waitingTimeLogger, true);\n\n        $('.timer').removeClass('blind');\n\n        console.log('second timer started');\n        secondTimer.start({countdown: true, startValues: {seconds: 30}});\n\n        waitMessage.html(secondTimer.getTimeValues().toString() + ' 초 이내 <b>다음</b> 버튼을 클릭해주세요.');\n\n        secondTimer.addEventListener('secondsUpdated', function (e) {\n          waitMessage.html(secondTimer.getTimeValues().toString() + ' 초 이내 <b>다음</b> 버튼을 클릭해주세요.');\n        });\n\n        secondTimer.addEventListener('targetAchieved', function (e) {\n          waitMessage.html('학습 초기화 중입니다..');\n\n          setTimeout(function () {\n            window.alert('30초 동안 다음 버튼을 누르지 않아 학습을 초기화 하였습니다.\\n\\n재시청 해주시기 바랍니다.');\n\n            axios.all([ deleteVideoLog(), deleteSessionLog() ])\n            .then(axios.spread(function (res1, res2) {\n              window.location.reload();\n            }));\n          }, 3000);\n        });\n      }, 1000);\n    }\n  });\n\n  btnReplayVideo.on('click', function (e) {\n    e.preventDefault();\n    player.unload().then(function () {\n      btnReplayVideo.addClass('blind');\n    }).catch(function (error) {\n      console.log(error);\n    });\n  });\n});\n"]}