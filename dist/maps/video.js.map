{"version":3,"sources":["video.js"],"names":["requirejs","timerLogPlayedSeconds","console","player","Vimeo","videoDuration","setPlayer","info","getDuration","then","duration","log","confirm","error","catch","videoLastPlayedTime","window","setCurrentTime","seconds","pause","timerLog","$","timer","timerLoggingInterval","videoPlayTimeLogger","stop","checkVideoDuration","showPlayBtn","floor","totalPlayedSeconds","Math","passiveRate","btnPlayNext","removeClass","btnReplayVideo","getCurrentTime","videoCurrentTime","training_user_id","ajax","type","url","played_seconds","video_duration","currenttime","data","trainingUserId","done","res","success","videoTotalPlayedSeconds","total_played_seconds","videoEndTimeLogger","video_id","videoId","msg","course_list_id","courseId","courseListId","sessionHasEnded","sessionProgressEndLogger","location","href","nextUrl","deleteVideoLog","axios","delete","params","deleteSessionLog","event","timerWaitingSeconds","waitMessage","playerContainer","secondTimer","Timer","initPlayer","on","sessionProgressStartLogger","alert","all","startValues","html","getTimeValues","toString","addEventListener","e","setTimeout","unload","addClass","res1","res2","reload","preventDefault"],"mappings":"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","file":"../javascripts/video.js","sourcesContent":["/**\n * 비디오 세션 학습\n */\n\n'use strict';\n\nrequirejs(\n  [\n    'common',\n    'Vimeo',\n    'easyTimer',\n    'jqueryTimer'\n  ],\nfunction (Util, Vimeo, Timer) {\n  var $ = $ || window.$;\n  var player = null;\n  var playerContainer = $('.videoplayer');\n  var timerLoggingInterval = playerContainer.data('interval'); // log every 5 seconds\n  var timerLog = null;\n  var timerWait = null; // 비디오 시청 종료 후 다음 버튼을 누르도록 강요하는 타이머\n  var timerLogPlayedSeconds = 0; // 시청시간(초)\n  var timerWaitingSeconds = playerContainer.data('wait-seconds'); // 다음버튼을 노출하는데 까지 대기하는 시간\n  var passiveRate = playerContainer.data('passive-rate'); // 다음 버튼을 노출하는 시점\n  var videoDuration = null; // 비디오 러닝타임\n  var waitMessage = $('#countdown .values'); // $('.wait-message');\n  var sessionHasEnded = false;\n  var videoCurrentTime; // 비디오 현재 시청시간\n\n  // element cache\n  var btnPlayNext = $('#btn_play_next');\n  var nextUrl = btnPlayNext.parent().attr('href');\n  var btnReplayVideo = $('#btn_replay_video');\n\n  // element data\n  var videoId = playerContainer.data('id'); // video 테이블의 id\n  var videoTotalPlayedSeconds = playerContainer.data('total-play'); // 비디오 총 시청시간\n  var videoLastPlayedTime = playerContainer.data('current-time'); // 마지막 재생시점\n  var trainingUserId = btnPlayNext.data('training-user-id');\n  var courseId = btnPlayNext.data('course-id');\n  var courseListId = btnPlayNext.data('course-list-id');\n\n  var secondTimer = new Timer();\n\n/**\n * entry point\n */\n  $(function () {\n    initPlayer();\n  });\n\n  /**\n   * Player 를 초기화 한다.\n   */\n  function initPlayer () {\n    var options = {\n      loop: false\n    };\n    player = new Vimeo('videoplayer', options);\n    player.setVolume(0.5); // 볼륨설정\n    player.ready().then(function () {\n      console.info('Player is ready.');\n\n      player.getDuration().then(function (duration) {\n        console.log('duration : ', duration);\n\n        videoDuration = duration; // 비디오 지속시간 구하기\n        setPlayer();\n      }).catch(function (error) {\n        console.error(error);\n      });\n\n      if (videoLastPlayedTime < videoDuration - 5) {\n        if (window.confirm('마지막 재생시점으로 이동하시겠습니까?')) {\n          player.setCurrentTime(videoLastPlayedTime).then(function (seconds) {\n            player.pause();\n          }).catch(function (error) {\n            console.error(error);\n          });\n        }\n      }\n    }).catch(function (error) {\n      console.error(error);\n    });\n\n    // player.enableTextTrack('ko').then(function (track) {\n    //   track.language = 'kr';\n    //   track.kind = 'subtitles';\n    //   track.label = 'hahaha';\n    // })\n    // .catch(function (error) {\n    //   console.log('track : ' + error);\n    // });\n  }\n\n  /**\n   * Player 를 셋팅한다.\n   */\n  function setPlayer () {\n    if (videoDuration) {\n      timerLog = $.timer(1000 * timerLoggingInterval, videoPlayTimeLogger, true);\n      timerLog.stop();\n      checkVideoDuration();\n    } else {\n      console.error('재생시간을 확인할 수 없습니다.');\n    }\n  }\n\n  /**\n   * 비디오 재생시간이 존재하는지 여부 체크\n   */\n  function checkVideoDuration () {\n  // videoDuration = getPlayerDuration();\n  // 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n    showPlayBtn(videoTotalPlayedSeconds);\n  }\n\n  /**\n   * 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n   */\n  function showPlayBtn (totalPlayedSeconds) {\n    if (Math.floor(videoDuration * (passiveRate / 100)) <= totalPlayedSeconds) {\n      btnPlayNext.removeClass('blind');\n      btnReplayVideo.addClass('blind');\n    }\n  }\n\n  /**\n   * 시청시간 로깅\n   */\n  function videoPlayTimeLogger () {\n    console.log('logging...');\n    timerLogPlayedSeconds += timerLoggingInterval;\n\n    player.getCurrentTime().then(function (seconds) {\n      if ((videoCurrentTime > 0) && videoCurrentTime === seconds) {\n        player.pause().then(function () {\n          console.log('비디오가 중지되었습니다.');\n          btnReplayVideo.removeClass('blind');\n        }).catch(function (error) {\n          console.error(error);\n        });\n        return;\n      }\n      videoCurrentTime = seconds;\n      $.ajax({\n        type: 'POST',\n        url: '/video/log/playtime',\n        data: {\n          training_user_id: trainingUserId,\n          video_id: videoId,\n          played_seconds: timerLogPlayedSeconds,\n          video_duration: videoDuration,\n          currenttime: seconds\n        }\n      }).done(function (res) {\n        if (!res.success) {\n          console.error(res.msg);\n\n          // 오류 발생 시 타이머와 비디오 재생을 멈춘다.\n          player.pause().then(function () {\n          }).catch(function (error) {\n            console.error(error);\n          });\n        } else {\n          timerLogPlayedSeconds = 0;\n          // 총 릴타임의 80% 이상을 시청한 경우 다음버튼을 활성화 한다.\n          videoTotalPlayedSeconds = res.total_played_seconds;\n          showPlayBtn(videoTotalPlayedSeconds);\n        }\n      });\n    }).catch(function (error) {\n      console.error(error);\n    });\n  }\n\n  /**\n   * 비디오 시청 종료시간 로깅\n   */\n  function videoEndTimeLogger () {\n    console.log('video log end');\n    $.ajax({\n      type: 'POST',\n      url: '/video/log/endtime',\n      data: {\n        video_id: videoId\n      }\n    }).done(function (res) {\n      if (!res.success) {\n        console.error(res.msg);\n      } else {\n      // console.info('종료시간 기록!');\n      }\n    });\n  }\n\n  /**\n   * 세션 시작일시 로깅\n   */\n  function sessionProgressStartLogger () {\n    console.log('session log start');\n    $.ajax({\n      type: 'POST',\n      url: '/session/log/starttime',\n      data: {\n        training_user_id: trainingUserId,\n        course_id: courseId,\n        course_list_id: courseListId\n      }\n    }).done(function (res) {\n      if (!res.success) {\n        console.error(res.msg);\n      // 오류 발생 시 타이머와 비디오 재생을 멈춘다.\n        timerLog.stop();\n        player.stop();\n      } else {\n        sessionHasEnded = res.hasEnded; // 세션 종료여부\n      }\n    });\n  }\n\n  /**\n   * 세션 종료일시 로깅\n   */\n  function sessionProgressEndLogger () {\n    console.log('session log end');\n    $.ajax({\n      type: 'POST',\n      url: '/session/log/endtime',\n      data: {\n        training_user_id: trainingUserId,\n        course_id: courseId,\n        course_list_id: courseListId\n      }\n    }).done(function (res) {\n      if (!res.success) {\n        console.error(res.msg);\n      // 오류 발생 시 타이머와 비디오 재생을 멈춘다.\n        timerLog.stop();\n        player.stop();\n      } else {\n        // console.info('세션 종료시간 기록');\n        window.location.href = nextUrl;\n      }\n    });\n  }\n\n  /**\n   * 정해진 시간 내에 다음 버튼을 누르지 않을 경우\n   * 학습을 초기화 하는 타이머 컨트롤러\n   */\n  function waitingTimeLogger () {\n    timerWaitingSeconds -= 1;\n    waitMessage.html(' ( ' + timerWaitingSeconds + ' 초 이내 클릭 )');\n\n    // 세션과 비디오 로그를 삭제한다.\n    if (timerWaitingSeconds <= 0) {\n      timerWait.stop();\n      window.alert('비디오를 재시청 해주시기 바랍니다.');\n\n      axios.all([ deleteVideoLog(), deleteSessionLog() ])\n        .then(axios.spread(function (res1, res2) {\n          window.location.reload();\n        }));\n    }\n  }\n\n  /**\n   * 세션 비디오 로그를 삭제한다.\n   */\n  function deleteVideoLog () {\n    return axios.delete('/video/log', {\n      params: {\n        video_id: videoId\n      }\n    })\n    .then(function (response) {\n    })\n    .catch(function (error) {\n      console.error(error);\n    });\n  }\n\n  // 세션 로그를 삭제한다.\n  function deleteSessionLog () {\n    return axios.delete('/session/log', {\n      params: {\n        training_user_id: trainingUserId,\n        course_list_id: courseListId\n      }\n    })\n    .then(function (response) {\n    })\n    .catch(function (error) {\n      console.error(error);\n    });\n  }\n\n/**\n * 다음버튼 클릭 시 발생 이벤트\n */\n  btnPlayNext.on('click', function (event) {\n    event.preventDefault();\n\n    secondTimer.stop();\n    // 세션 종료로그를 기록한다.\n    sessionProgressEndLogger();\n  });\n\n  /**\n   * Player 재생 시 발생\n   */\n  player.on('play', function (data) {\n    // secondTimer.reset();\n    // 세션시작로그\n    sessionProgressStartLogger();\n    // 로깅 시간간격 설정\n    timerLog.reset(1000 * timerLoggingInterval);\n  });\n\n  /**\n   * Player 일시정지 시 발생\n   */\n  player.on('error', function (data) {\n    console.info('error!');\n    console.error(data);\n  });\n\n  /**\n   * Player 일시정지 시 발생\n   */\n  player.on('pause', function (data) {\n    console.info('player: pause');\n    // 로깅 일시정지\n    timerLog.pause();\n    // 비디오 시청 종료일시 기록\n    videoEndTimeLogger();\n  });\n\n/**\n * Player 종료 시 발생\n */\n  player.on('ended', function (data) {\n    console.info('player: ended');\n    // 로깅 일시정지\n    timerLog.pause();\n    // 총 시청시간에 따라 다음 버튼 표시\n    showPlayBtn(videoTotalPlayedSeconds + timerLoggingInterval);\n    // 비디오 시청 종료일시 기록\n    videoEndTimeLogger();\n    // 세션 종료 시 대기 타이머 시작\n    if (!sessionHasEnded) {\n      setTimeout(function () {\n        // timerWait = $.timer(1000 * 1, waitingTimeLogger, true);\n\n        $('.timer').removeClass('blind');\n\n        console.log('second timer started');\n        secondTimer.start({countdown: true, startValues: {seconds: 30}});\n\n        waitMessage.html(secondTimer.getTimeValues().toString() + ' 초 이내 <b>다음</b> 버튼을 클릭해주세요.');\n\n        secondTimer.addEventListener('secondsUpdated', function (e) {\n          waitMessage.html(secondTimer.getTimeValues().toString() + ' 초 이내 <b>다음</b> 버튼을 클릭해주세요.');\n        });\n\n        secondTimer.addEventListener('targetAchieved', function (e) {\n          waitMessage.html('학습 초기화 중입니다..');\n\n          setTimeout(function () {\n            window.alert('30초 동안 다음 버튼을 누르지 않아 학습을 초기화 하였습니다.\\n\\n재시청 해주시기 바랍니다.');\n\n            axios.all([ deleteVideoLog(), deleteSessionLog() ])\n            .then(axios.spread(function (res1, res2) {\n              window.location.reload();\n            }));\n          }, 3000);\n        });\n      }, 1000);\n    }\n  });\n\n  // player.on('timeupdate', function (event) {\n  //   console.log(event.percent);\n  // });\n\n  btnReplayVideo.on('click', function (e) {\n    e.preventDefault();\n    player.unload().then(function () {\n      btnReplayVideo.addClass('blind');\n    }).catch(function (error) {\n      console.log(error);\n    });\n  });\n});\n"]}